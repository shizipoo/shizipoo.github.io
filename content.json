[{"title":"Hello World","date":"2019-25-2 20:i","path":"2019/10/29/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","permalink":"https://shizipoo.github.io/2019/10/29/hello-world/","tags":[]},{"title":"django","date":"2019-5-2 17:i","path":"2019/10/29/django/","text":"安装python3123456wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgztar -xzvf Python-3.6.9.tgzcd Python-3.6.9./configure --with-sslmakesudo make install 安装Django 方法一1sudo pip3 install Django==2.1 方法二 (此方法安装的为最新版本)12git clone https://github.com/django/django.gitsudo pip3 install -e ./django 检测模块是否安装成功1python3 -c \"import django;print(django.get_version())\" 如果安装django2.2以上版本，需要安装SQLite 3.8.3以上版本 创建项目1234mkdir myprojectcd myprojectdjango-admin startproject mysite .python3 manage.py runserver 报错 运行的python3 manage.py runserver出现了报错，django.db.utils.NotSupportedError: URIs not supported，是SQLite 的原因，SQLite 3.8以前的版本都有这个问题。 查看SQLite的版本，命令如下： 123456$ sqlite3 --version3.6.20$ python3 -c \"import sqlite3; print(sqlite3.version)\"2.6.0$ python3 -c \"import sqlite3; print(sqlite3.sqlite_version)\"3.6.20 解决办法：修改/usr/local/lib/python3.6/site-packages/django/db/backends/sqlite3/base.py的155行的’uri’: True ，True 该给False。 12155 kwargs.update(&#123;'check_same_thread': False, 'uri': True&#125;)156 return kwargs 然后重新运行python3 manage.py runserver 然后在浏览器中输入 http://127.0.0.1:8000/ 即可看到django创建的网页 但是如果在服务器上，需要修改settings.py脚本中的host地址， 12345678910111213.├── db.sqlite3├── manage.py└── mysite ├── __init__.py ├── __pycache__ │ ├── __init__.cpython-36.pyc │ ├── settings.cpython-36.pyc │ ├── urls.cpython-36.pyc │ └── wsgi.cpython-36.pyc ├── settings.py ├── urls.py └── wsgi.py 将ALLOWED_HOSTS = [] 改为 ALLOWED_HOSTS = [&#39;172.26.0.23&#39;] 然后运行python3 manage.py runserver 0.0.0.0:8000然后在浏览器中输入http://172.26.0.23:8000/ 即可看到django创建的网页 创建应用1234567891011121314151617181920212223python3 manage.py startapp blog.├── blog│ ├── admin.py│ ├── apps.py│ ├── __init__.py│ ├── migrations│ │ └── __init__.py│ ├── models.py│ ├── tests.py│ └── views.py├── db.sqlite3├── manage.py└── mysite ├── __init__.py ├── __pycache__ │ ├── __init__.cpython-36.pyc │ ├── settings.cpython-36.pyc │ ├── urls.cpython-36.pyc │ └── wsgi.cpython-36.pyc ├── settings.py ├── urls.py └── wsgi.py 创建完应用，需要进行如下配置： 设置 ./mysite/setttings.py文件，添加blog应用： 123456789INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'blog',] 设置 ./blog/models.py文件，其实就是设置数据储存的字段： 12345678910111213141516from django.db import modelsfrom django.utils import timezonefrom django.contrib.auth.models import User# Create your models here.class BlogArticles(models.Model): title = models.CharField(max_length=300) author = models.ForeignKey(User, related_name=\"blog_posts\", on_delete=models.CASCADE) body = models.TextField() publish = models.DateTimeField(default=timezone.now) class Meta: ordering = (\"-publish\",) def __str__(self): return self.title 运行 python3 manage.py makemigrations 创建模型 运行python3 manage.py migrate 创建数据库 发布博客文章 首先要创建超级用户，设置用户名，邮箱和密码。 1python3 manage.py createsuperuser 然后运行python3 manage.py runserver 0.0.0.0:8000在浏览其中输入http://172.26.0.23:8000/admin/ 就会出现下面的界面：输入刚刚设置的账户和密码即可登录，登录完成的界面如下所示： 要想发表博客，需要做如下设置：编写./blog/admin.py: 12345678910111213from django.contrib import adminfrom .models import BlogArticles# Register your models here.class BlogArticlesAdmin(admin.ModelAdmin): list_display = (\"title\", \"author\", \"publish\") list_filter = (\"publish\", \"author\") search_fields = ('title', \"body\") raw_id_fields = (\"author\",) date_hierarchy = \"publish\" ordering = ['publish','author']admin.site.register(BlogArticles,BlogArticlesAdmin) 刷新页面，就可以看到发布博客的位置： 显示博客信息 显示文章标题 配置./blog/views.py1234567from django.shortcuts import renderfrom .models import BlogArticles# Create your views here.def blog_title(request): blogs = BlogArticles.objects.all() return render(request, \"blog/titles.html\", &#123;\"blogs\":blogs&#125;) 在./blog/文件夹下创建templates文件夹，并创建如下文件：1234templates├── base.html└── blog └── titles.html 修改base.html文件：12345678910111213141516171819&lt;! DOCTYPE html&gt;&lt;html lang=\"zh-cn\"&gt;&lt;head&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\"&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; &lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125;&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"http://necolas.github.io/normalize.css/\"&gt; &lt;link rel=\"stylesheet\" href=\"http://libs.baidu.com/bootstrap/3.0.3/css/bootstrap.min.css\"&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"container\"&gt; &#123;% block content %&#125; &#123;% endblock %&#125;&lt;/div&gt;&lt;script src=\"http://libs.baidu.com/jquery/2.0.0/jquery.min.js\"&gt;&lt;/script&gt;&lt;script src=\"http://libs.baidu.com/boostrap/3.0.3/js/bootstrap.min.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 修改./templates/blog/titles.html文件：123456789101112131415161718192021&#123;% extends \"base.html\" %&#125;&#123;% block title %&#125;blog titles&#123;% endblock %&#125;&#123;% block content %&#125;&lt;div class=\"row text-center vertical-middle-sm\"&gt; &lt;h1&gt;我的博客&lt;/h1&gt;&lt;/div&gt;&lt;div class=\"row\"&gt; &lt;div class=\"col-xs-12 col-md-8\"&gt; &lt;ul&gt; &#123;% for blog in blogs %&#125; &lt;li&gt;&#123;&#123; blog.title &#125;&#125;&lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &lt;/div&gt; &lt;div class=\"col-xs-6 col-md-4\"&gt; &lt;h2&gt;广告&lt;/h2&gt; &lt;p&gt;跟老齐学：www.itdiffer.com&lt;/p&gt; &lt;img width=\"200px\" src=\"http://pydi4imsi.bkt.clouddn.com/1001.jpg\"&gt; &lt;/div&gt;&lt;/div&gt;&#123;% endblock %&#125; 修改./mysite/urls.py文件：1234567from django.contrib import adminfrom django.conf.urls import url,includeurlpatterns = [ url(r'^admin/', admin.site.urls), url(r'^blog/', include('blog.urls')),] 修改./blog/urls.py文件：123456from django.conf.urls import urlfrom . import viewsurlpatterns=[ url(r'^$', views.blog_title, name=\"blog_title\"),] 然后在浏览器中输入http://172.26.0.23:8000/blog/即可看到如下界面： 查看文章内容 修改titles.html： 123&#123;% for blog in blogs %&#125; &lt;li&gt;&lt;a href=\"&#123;&#123; blog.id &#125;&#125;\"&gt;&#123;&#123; blog.title &#125;&#125;&lt;/a&gt;&lt;/li&gt;&#123;% endfor %&#125; 在./blog/views.py中添加文章请求的函数blog_article(): 1234def blog_article(request, article_id): article = BlogArticles.objects.get(id=article_id) pub = article.publish return render(request, \"blog/content.html\", &#123;\"article\":article , \"publish\":pub &#125;) 创建模板./templates/blog/content.html文件： 123456789101112131415161718&#123;% extends \"base.html\" %&#125;&#123;% block title %&#125;blog article&#123;% endblock %&#125;&#123;% block content %&#125;&lt;div class=\"row text-center vertical-middke-sm\"&gt; &lt;h1&gt;&#123;&#123; article.title &#125;&#125;&lt;/h1&gt;&lt;/div&gt;&lt;div class=\"row\"&gt; &lt;div class=\"col-xs-12 col-md-8\"&gt; &lt;p class=\"text-center\"&gt;&lt;span&gt;&#123;&#123; article.author.username &#125;&#125; &lt;/span&gt;&lt;span style=\"margin-left:20px\"&gt;&#123;&#123; article.publish &#125;&#125;&lt;/span&gt;&lt;/p&gt; &lt;div&gt;&#123;&#123; article.body &#125;&#125;&lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-xs-6 col-md-4\"&gt; &lt;h2&gt;广告&lt;/h2&gt; &lt;p&gt;跟老齐学：www.itdiffer.com&lt;/p&gt; &lt;img width=\"200px\" src=\"http://pydi4imsi.bkt.clouddn.com/1001.jpg\"&gt; &lt;/div&gt;&lt;/div&gt;&#123;% endblock %&#125; 修改./blog/urls.py 1234567from django.conf.urls import urlfrom . import viewsurlpatterns=[ url(r'^$', views.blog_title, name=\"blog_title\"), url(r'(?P&lt;article_id&gt;\\d)/$', views.blog_article, name=\"blog_detail\"),] 然后刷新页面，点击文章标题，即可出现下面的界面： django的MTV M: 模型（Model），即数据存取层，模型是网站项目的基础，主要负责处理与数据相关的事务，如读取、写入数据等。 T:模板（Template）,即表现层，处理与表现相关的事务，例如如何在页面中显示相关内容。 V:视图（Views），即业务逻辑层，包含存取模型及调取相应模板的相关逻辑， 是 M （模型）和 T （模板）之间的桥梁。当 Django 得到用户的请求后，根据 URL 映射关系调用相应的视图，视图则调用和处理有关数据。与模板相比，视图确定访问者能看到哪些数据，而模板确定怎么看到这些数据（或者说用什么方式看到这些数据）。 参考链接：https://simpleisbetterthancomplex.com/series/beginners-guide/1.11/","permalink":"https://shizipoo.github.io/2019/10/29/django/","tags":[{"name":"django","slug":"django","permalink":"https://shizipoo.github.io/tags/django/"}]},{"title":"test_my_site","date":"2019-43-2 16:i","path":"2019/10/29/test-my-site/","text":"","permalink":"https://shizipoo.github.io/2019/10/29/test-my-site/","tags":[]}]